from typing import TYPE_CHECKING, Tuple
from constants import *
from PyQt6.QtCore import QPointF
from objects.arrow import Arrow

if TYPE_CHECKING:
    from objects.pictograph.position_engines.arrow_positioners.Type1_arrow_positioner import (
        Type1ArrowPositioner,
    )
    from objects.pictograph.pictograph import Pictograph


class I_Positioner:
    def __init__(
        self, pictograph: "Pictograph", positioner: "Type1ArrowPositioner"
    ) -> None:
        self.pictograph = pictograph
        self.positioner = positioner

    def _reposition_I(self) -> None:
        for arrow in self.pictograph.arrows.values():
            adjustment = self._calculate_I_adjustment(arrow)
            self.positioner._apply_shift_adjustment(arrow, adjustment)

    def _calculate_I_adjustment(self, arrow: Arrow) -> QPointF:
        pro_arrow, anti_arrow = self._get_pro_anti_arrows(arrow.scene)
        adjustment_key = (pro_arrow.turns, anti_arrow.turns)
        return self._get_adjustment(adjustment_key, arrow)

    def _get_pro_anti_arrows(self, scene: "Pictograph") -> Tuple[Arrow, Arrow]:
        arrows = scene.arrows
        pro_arrow = arrows[RED] if arrows[RED].motion_type == PRO else arrows[BLUE]
        anti_arrow = arrows[RED] if arrows[RED].motion_type == ANTI else arrows[BLUE]
        return pro_arrow, anti_arrow

    def _get_adjustment(self, adjustment_key, arrow: Arrow) -> QPointF:
        adjustments = self._get_adjustments_dictionary()

        # Check if the adjustment_key is a tuple, indicating a special case
        if isinstance(adjustment_key, tuple):
            # Access the nested dictionary using the tuple key
            hybrid_turns_adjustments = adjustments.get(adjustment_key, {})
            motion_type_adjustments = hybrid_turns_adjustments.get(
                arrow.motion_type, {}
            )
        else:
            # Handle the standard case where adjustment_key is a single value
            motion_type_adjustments = (
                adjustments[0].get(adjustment_key, {}).get(arrow.motion_type, {})
            )

        direction_adjustments = motion_type_adjustments.get(
            arrow.motion.prop_rot_dir, {}
        )
        return direction_adjustments.get(arrow.loc, QPointF(0, 0))

    def _get_adjustments_dictionary(self) -> dict:
        # Helper function to create a sub-dictionary with unique values for each direction
        def create_direction_dict(ne, se, sw, nw):
            return {
                NORTHEAST: QPointF(*ne),
                SOUTHEAST: QPointF(*se),
                SOUTHWEST: QPointF(*sw),
                NORTHWEST: QPointF(*nw),
            }

        # Helper function to create motion type dictionaries (PRO and ANTI) with their respective directions
        def create_motion_type_dict(pro_values, anti_values):
            return {
                PRO: {
                    CLOCKWISE: create_direction_dict(*pro_values[0]),
                    COUNTER_CLOCKWISE: create_direction_dict(*pro_values[1]),
                },
                ANTI: {
                    CLOCKWISE: create_direction_dict(*anti_values[0]),
                    COUNTER_CLOCKWISE: create_direction_dict(*anti_values[1]),
                },
            }

        # Mapping of keys to their respective value sets for PRO and ANTI motion types
        adjustment_values = {
            # (pro_turns, anti_turns): [pro_values, anti_values]
            # Each pro_values and anti_values is a pair of tuples for CW and CCW
            (0, 0): [
                ((75, -85), (85, 75), (-75, 85), (-85, -75)),  # PRO CW
                ((85, -75), (75, 85), (-85, 75), (-75, -85)),  # PRO CCW
                ((50, -25), (25, 50), (-50, 25), (-25, -50)),  # ANTI CW
                ((25, -50), (50, 25), (-25, 50), (-50, -25)),  # ANTI CCW
            ],
            (0, 0.5): [
                ((50, -35), (35, 50), (-50, 35), (-35, -50)),  # PRO CW
                ((35, -50), (50, 35), (-35, 50), (-50, -35)),  # PRO CCW
                ((-110, -115), (115, -110), (110, 115), (-115, 110)),  # ANTI CW
                ((-115, 110), (-110, -115), (115, -110), (110, 115)),  # ANTI CCW
            ],
            (0, 1): [
                ((75, -85), (85, 75), (-75, 85), (-85, -75)),  # PRO CW
                ((85, -75), (75, 85), (-85, 75), (-75, -85)),  # PRO CCW
                ((50, -25), (25, 50), (-50, 25), (-25, -50)),  # ANTI CW
                ((25, -50), (50, 25), (-25, 50), (-50, -25)),  # ANTI CCW
            ],
            (0, 1.5): [
                ((75, -80), (80, 75), (-75, 80), (-80, -75)),  # PRO CW
                ((80, -75), (75, 80), (-80, 75), (-75, -80)),  # PRO CCW
                ((-65, -30), (30, -65), (65, 30), (-30, 65)),  # ANTI CW
                ((30, 65), (-65, 30), (-30, -65), (65, -30)),  # ANTI CCW
            ],
            (0, 2): [
                ((75, -85), (85, 75), (-75, 85), (-85, -75)),  # PRO CW
                ((85, -75), (75, 85), (-85, 75), (-75, -85)),  # PRO CCW
                ((50, -25), (25, 50), (-50, 25), (-25, -50)),  # ANTI CW
                ((25, -50), (50, 25), (-25, 50), (-50, -25)),  # ANTI CCW
            ],
            (0, 2.5): [
                ((50, -35), (35, 50), (-50, 35), (-35, -50)),  # PRO CW
                ((35, -50), (50, 35), (-35, 50), (-50, -35)),  # PRO CCW
                ((-90, 110), (-110, -90), (90, -110), (110, 90)),  # ANTI CW
                ((-110, 90), (-90, -110), (110, -90), (90, 110)),  # ANTI CCW
            ],
            (0, 3): [
                ((75, -85), (85, 75), (-75, 85), (-85, -75)),  # PRO CW
                ((85, -75), (75, 85), (-85, 75), (-75, -85)),  # PRO CCW
                ((50, -25), (25, 50), (-50, 25), (-25, -50)),  # ANTI CW
                ((25, -50), (50, 25), (-25, 50), (-50, -25)),  # ANTI CCW
            ],
            (0.5, 0): [
                ((-15, 55), (-55, -15), (15, -55), (55, 15)),  # PRO
                ((-55, 15), (-15, -55), (55, -15), (15, 55)),  # PRO
                ((75, -70), (70, 75), (-75, 70), (-70, -75)),  # ANTI
                ((70, -75), (75, 70), (-70, 75), (-75, -70)),  # ANTI
            ],
            (0.5, 0.5): [
                ((5, 40), (-40, 5), (-5, -40), (40, -5)),  # PRO CW
                ((-40, -5), (5, -40), (40, 5), (-5, 40)),  # PRO CCW
                ((-60, 115), (-115, -60), (60, -115), (115, 60)),  # ANTI CW
                ((-115, 60), (-60, -115), (115, -60), (60, 115)),  # ANTI CCW
            ],
            (0.5, 1): [
                ((-15, 55), (-55, -15), (15, -55), (55, 15)),  # PRO
                ((-55, 15), (-15, -55), (55, -15), (15, 55)),  # PRO
                ((75, -70), (70, 75), (-75, 70), (-70, -75)),  # ANTI
                ((70, -75), (75, 70), (-70, 75), (-75, -70)),  # ANTI
            ],
            (0.5, 1.5): [
                ((30, 90), (-90, 30), (-30, -90), (90, -30)),  # PRO
                ((-90, -30), (30, -90), (90, 30), (-30, 90)),  # PRO
                ((-15, -35), (35, -15), (15, 35), (-35, 15)),  # ANTI
                ((35, 15), (-15, 35), (-35, -15), (15, -35)),  # ANTI
            ],
            (0.5, 2): [
                ((-15, 55), (-55, -15), (15, -55), (55, 15)),  # PRO
                ((-55, 15), (-15, -55), (55, -15), (15, 55)),  # PRO
                ((75, -70), (70, 75), (-75, 70), (-70, -75)),  # ANTI
                ((70, -75), (75, 70), (-70, 75), (-75, -70)),  # ANTI
            ],
            (0.5, 2.5): [
                ((5, 55), (-55, 5), (-5, -55), (55, -5)),  # PRO CW
                ((-55, -5), (5, -55), (55, 5), (-5, 55)),  # PRO CCW
                ((-60, 110), (-110, -60), (60, -110), (110, 60)),  # ANTI CW
                ((-110, 60), (-60, -110), (110, -60), (60, 110)),  # ANTI CCW
            ],
            (0.5, 3): [
                ((-15, 55), (-55, -15), (15, -55), (55, 15)),  # PRO
                ((-55, 15), (-15, -55), (55, -15), (15, 55)),  # PRO
                ((75, -70), (70, 75), (-75, 70), (-70, -75)),  # ANTI
                ((70, -75), (75, 70), (-70, 75), (-75, -70)),  # ANTI
            ],
            (1, 0): [
                ((-35, -40), (40, -35), (35, 40), (-40, 35)),  # PRO
                ((40, 35), (-35, 40), (-40, -35), (35, -40)),  # PRO
                ((65, -70), (70, 65), (-65, 70), (-70, -65)),  # ANTI
                ((70, -65), (65, 70), (-70, 65), (-65, -70)),  # ANTI
            ],
            (1, 0.5): [
                ((-45, -60), (60, -45), (45, 60), (-60, 45)),  # PRO CW
                ((60, 45), (-45, 60), (-60, -45), (45, -60)),  # PRO CCW
                ((-85, 115), (-115, -85), (85, -115), (115, 85)),  # ANTI CW
                ((-115, 85), (-85, -115), (115, -85), (85, 115)),  # ANTI CCW
            ],
            (1, 1): [
                ((5, -50), (50, 5), (-5, 50), (-50, -5)),  # PRO
                ((50, -5), (5, 50), (-50, 5), (-5, -50)),  # PRO
                ((55, -15), (15, 55), (-55, 15), (-15, -55)),  # ANTI
                ((15, -55), (55, 15), (-15, 55), (-55, -15)),  # ANTI
            ],
            (1, 1.5): [
                ((-45, -65), (65, -45), (45, 65), (-65, 45)),  # PRO CW
                ((65, 45), (-45, 65), (-65, -45), (45, -65)),  # PRO CCW
                ((-70, 20), (-20, -70), (70, -20), (20, 70)),  # ANTI CW
                ((-20, 70), (-70, -20), (20, -70), (70, 20)),  # ANTI CCW
            ],
            (1, 2): [
                ((-45, -30), (30, -45), (45, 30), (-30, 45)),  # PRO
                ((30, 45), (-45, 30), (-30, -45), (45, -30)),  # PRO
                ((65, -80), (80, 65), (-65, 80), (-80, -65)),  # ANTI
                ((80, -65), (65, 80), (-80, 65), (-65, -80)),  # ANTI
            ],
            (1, 2.5): [
                ((-40, 5), (5, -40), (40, -5), (-5, 40)),  # PRO CW
                ((5, 40), (-40, 5), (-5, -40), (40, -5)),  # PRO CCW
                ((-85, 115), (-115, -85), (85, -115), (115, 85)),  # ANTI CW
                ((-115, 85), (-85, -115), (115, -85), (85, 115)),  # ANTI CCW
            ],
            (1, 3): [
                ((-45, -30), (30, -45), (45, 30), (-30, 45)),  # PRO
                ((30, 45), (-45, 30), (-30, -45), (45, -30)),  # PRO
                ((65, -80), (80, 65), (-65, 80), (-80, -65)),  # ANTI
                ((80, -65), (65, 80), (-80, 65), (-65, -80)),  # ANTI
            ],
            (1.5, 0): [
                ((15, 5), (-5, 15), (-15, -5), (5, -15)),  # PRO CW
                ((-5, -15), (15, -5), (5, 15), (-15, 5)),  # PRO CCW
                ((80, -70), (70, 80), (-80, 70), (-70, -80)),  # ANTI CW
                ((70, -80), (80, 70), (-70, 80), (-80, -70)),  # ANTI CCW
            ],
            (1.5, 0.5): [
                ((-10, 5), (-5, -10), (10, -5), (5, 10)),  # PRO CW
                ((-5, 10), (-10, -5), (5, -10), (10, -5)),  # PRO CCW
                ((-80, 130), (-130, -80), (80, -130), (130, 80)),  # ANTI CW
                ((-130, 80), (-80, -130), (130, -80), (80, 130)),  # ANTI CCW
            ],
            (1.5, 1): [
                ((15, 5), (-5, 15), (-15, -5), (5, -15)),  # PRO CW
                ((-5, -15), (15, -5), (5, 15), (-15, 5)),  # PRO CCW
                ((135, -70), (70, 135), (-135, 70), (-70, -135)),  # ANTI CW
                ((70, -135), (135, 70), (-70, 135), (-135, -70)),  # ANTI CCW
            ],
            (1.5, 1.5): [
                ((-30, 25), (-25, -30), (30, -25), (25, 30)),  # PRO CW
                ((-25, 30), (-30, -25), (25, -30), (30, 25)),  # PRO CCW
                ((-50, -45), (45, -50), (50, 45), (-45, 50)),  # ANTI CW
                ((45, 50), (-50, 45), (-45, -50), (50, -45)),  # ANTI CCW
            ],
            (1.5, 2): [
                ((15, 5), (-5, 15), (-15, -5), (5, -15)),  # PRO CW
                ((-5, -15), (15, -5), (5, 15), (-15, 5)),  # PRO CCW
                ((135, -70), (70, 135), (-135, 70), (-70, -135)),  # ANTI CW
                ((70, -135), (135, 70), (-70, 135), (-135, -70)),  # ANTI CCW
            ],
            (1.5, 2.5): [
                ((-10, 5), (-5, -10), (10, -5), (5, 10)),  # PRO CW
                ((-5, 10), (-10, -5), (5, -10), (10, -5)),  # PRO CCW
                ((-75, 130), (-130, -75), (75, -130), (130, 75)),  # ANTI CW
                ((-130, 75), (-75, -130), (130, -75), (75, 130)),  # ANTI CCW
            ],
            (1.5, 3): [
                ((15, 5), (-5, 15), (-15, -5), (5, -15)),  # PRO CW
                ((-5, -15), (15, -5), (5, 15), (-15, 5)),  # PRO CCW
                ((135, -70), (70, 135), (-135, 70), (-70, -135)),  # ANTI CW
                ((70, -135), (135, 70), (-70, 135), (-135, -70)),  # ANTI CCW
            ],
            (2, 0): [
                ((70, -90), (90, 70), (-70, 90), (-90, -70)),  # PRO CW
                ((90, -70), (70, 90), (-90, 70), (-70, -90)),  # PRO CCW
                ((50, -20), (20, 50), (-50, 20), (-20, -50)),  # ANTI CW
                ((20, -50), (50, 20), (-20, 50), (-50, -20)),  # ANTI CCW
            ],
            (2, 0.5): [
                ((55, -50), (50, 55), (-55, 50), (-50, -55)),  # PRO CW
                ((50, -55), (55, 50), (-50, 55), (-55, -50)),  # PRO CCW
                ((-80, 130), (-130, -80), (80, -130), (130, 80)),  # ANTI CW
                ((-130, 80), (-80, -130), (130, -80), (80, 130)),  # ANTI CCW
            ],
            (2, 1): [
                ((85, -105), (105, 85), (-85, 105), (-105, -85)),  # PRO CW
                ((105, -85), (85, 105), (-105, 85), (-85, -105)),  # PRO CCW
                ((50, -20), (20, 50), (-50, 20), (-20, -50)),  # ANTI CW
                ((20, -50), (50, 20), (-20, 50), (-50, -20)),  # ANTI CCW
            ],
            (2, 1.5): [
                ((70, -40), (40, 70), (-70, 40), (-40, -70)),  # PRO CW
                ((40, -70), (70, 40), (-40, 70), (-70, -40)),  # PRO CCW
                ((-50, -15), (15, -50), (50, 15), (-15, 50)),  # ANTI CW
                ((15, 50), (-50, 15), (-15, -50), (50, -15)),  # ANTI CCW
            ],
            (2, 2): [
                ((80, -100), (100, 80), (-80, 100), (-100, -80)),  # PRO CW
                ((100, -80), (80, 100), (-100, 80), (-80, -100)),  # PRO CCW
                ((45, -40), (40, 45), (-45, 40), (-40, -45)),  # ANTI
                ((40, -45), (45, 40), (-40, 45), (-45, -40)),  # ANTI
            ],
            (2, 2.5): [
                ((55, -45), (45, 55), (-55, 45), (-45, -55)),  # PRO CW
                ((45, -55), (55, 45), (-45, 55), (-55, -45)),  # PRO CCW
                ((-75, 130), (-130, -75), (75, -130), (130, 75)),  # ANTI CW
                ((-130, 75), (-75, -130), (130, -75), (75, 130)),  # ANTI CCW
            ],
            (2, 3): [
                ((100, -85), (85, 100), (-100, 85), (-85, -100)),  # PRO CW
                ((85, -100), (100, 85), (-85, 100), (-100, -85)),  # PRO CCW
                ((45, -30), (30, 45), (-45, 30), (-30, -45)),  # ANTI
                ((30, -45), (45, 30), (-30, 45), (-45, -30)),  # ANTI
            ],
            (2.5, 0): [
                ((-5, 45), (-45, -5), (5, -45), (45, 5)),  # PRO CW
                ((-45, 5), (-5, -45), (45, -5), (5, 45)),  # PRO CCW
                ((-1, 40), (-40, -1), (1, -40), (40, 1)),  # ANTI CW
                ((-40, 1), (-1, -40), (40, -1), (1, 40)),  # ANTI CCW
            ],
            (2.5, 0.5): [
                ((25, 50), (-50, 25), (-25, -50), (50, -25)),  # PRO CW
                ((-50, -25), (25, -50), (50, 25), (-25, 50)),  # PRO CCW
                ((-75, 120), (-120, -75), (75, -120), (120, 75)),  # ANTI CW
                ((-120, 75), (-75, -120), (120, -75), (75, 120)),  # ANTI CCW
            ],
            (2.5, 1): [
                ((-15, 60), (-60, -15), (15, -60), (60, 15)),  # PRO CW
                ((-60, 15), (-15, -60), (60, -15), (15, 60)),  # PRO CCW
                ((75, -70), (70, 75), (-75, 70), (-70, -75)),  # ANTI CW
                ((70, -75), (75, 70), (-70, 75), (-75, -70)),  # ANTI CCW
            ],
            (2.5, 1.5): [
                ((70, 65), (-65, 70), (-70, -65), (65, -70)),  # PRO CW
                ((-65, -70), (70, -65), (65, 70), (-70, 65)),  # PRO CCW
                ((-60, -20), (20, -60), (60, 20), (-20, 60)),  # ANTI CW
                ((20, 60), (-60, 20), (-20, -60), (60, -20)),  # ANTI CCW
            ],
            (2.5, 2): [
                ((-15, 60), (-60, -15), (15, -60), (60, 15)),  # PRO CW
                ((-60, 15), (-15, -60), (60, -15), (15, 60)),  # PRO CCW
                ((75, -70), (70, 75), (-75, 70), (-70, -75)),  # ANTI CW
                ((70, -75), (75, 70), (-70, 75), (-75, -70)),  # ANTI CCW
            ],
            (2.5, 2.5): [
                ((25, 45), (-45, 25), (-25, -45), (45, -25)),  # PRO CW
                ((-45, -25), (25, -45), (45, 25), (-25, 45)),  # PRO CCW
                ((-60, 115), (-115, -60), (60, -115), (115, 60)),  # ANTI CW
                ((-115, 60), (-60, -115), (115, -60), (60, 115)),  # ANTI CCW
            ],
            (2.5, 3): [
                ((-15, 60), (-60, -15), (15, -60), (60, 15)),  # PRO CW
                ((-60, 15), (-15, -60), (60, -15), (15, 60)),  # PRO CCW
                ((75, -70), (70, 75), (-75, 70), (-70, -75)),  # ANTI CW
                ((70, -75), (75, 70), (-70, 75), (-75, -70)),  # ANTI CCW
            ],
            (3, 0): [
                ((-45, -35), (35, -45), (45, 35), (-35, 45)),  # PRO
                ((35, 45), (-45, 35), (-35, -45), (45, -35)),  # PRO
                ((40, -125), (125, 40), (-40, 125), (-125, -40)),  # ANTI
                ((125, -40), (40, 125), (-125, 40), (-40, -125)),  # ANTI
            ],
            (3, 0.5): [
                ((-50, -60), (60, -50), (50, 60), (-60, 50)),  # PRO CW
                ((60, 50), (-50, 60), (-60, -50), (50, -60)),  # PRO CCW
                ((-75, 120), (-120, -75), (75, -120), (120, 75)),  # ANTI CW
                ((-120, 75), (-75, -120), (120, -75), (75, 120)),  # ANTI CCW
            ],
            (3, 1): [
                ((-45, -35), (35, -45), (45, 35), (-35, 45)),  # PRO
                ((35, 45), (-45, 35), (-35, -45), (45, -35)),  # PRO
                ((40, -125), (125, 40), (-40, 125), (-125, -40)),  # ANTI
                ((125, -40), (40, 125), (-125, 40), (-40, -125)),  # ANTI
            ],
            (3, 1.5): [
                ((-90, -10), (10, -90), (90, 10), (-10, 90)),  # PRO CW
                ((10, 90), (-90, 10), (-10, -90), (90, -10)),  # PRO CCW
                ((-65, -40), (40, -65), (65, 40), (-40, 65)),  # ANTI CW
                ((40, 65), (-65, 40), (-40, -65), (65, -40)),  # ANTI CCW
            ],
            (3, 2): [
                ((-45, -35), (35, -45), (45, 35), (-35, 45)),  # PRO
                ((35, 45), (-45, 35), (-35, -45), (45, -35)),  # PRO
                ((65, -100), (100, 65), (-65, 100), (-100, -65)),  # ANTI
                ((100, -65), (65, 100), (-100, 65), (-65, -100)),  # ANTI
            ],
            (3, 2.5): [
                ((-35, -20), (20, -35), (35, 20), (-20, 35)),  # PRO CW
                ((20, 35), (-35, 20), (-20, -35), (35, -20)),  # PRO CCW
                ((-60, 110), (-110, -60), (60, -110), (110, 60)),  # ANTI CW
                ((-110, 60), (-60, -110), (110, -60), (60, 110)),  # ANTI CCW
            ],
            (3, 3): [
                ((-45, -30), (30, -45), (45, 30), (-30, 45)),  # PRO CW
                ((30, 45), (-45, 30), (-30, -45), (45, -30)),  # PRO CCW
                ((80, -75), (75, 80), (-80, 75), (-75, -80)),  # ANTI CW
                ((75, -80), (80, 75), (-75, 80), (-80, -75)),  # ANTI CCW
            ],
        }
        adjustments = {}
        for key, value in adjustment_values.items():
            if len(value) == 4 and all(isinstance(t, tuple) for t in value):
                pro_cw, pro_ccw, anti_cw, anti_ccw = value
                adjustments[key] = create_motion_type_dict(
                    (pro_cw, pro_ccw), (anti_cw, anti_ccw)
                )
            else:
                raise ValueError(
                    f"Incorrect adjustment structure for key {key}: {value}"
                )

        return adjustments
